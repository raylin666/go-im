// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                 = new(Query)
	Account           *account
	AccountOnline     *accountOnline
	C2CMessage        *c2CMessage
	C2COfflineMessage *c2COfflineMessage
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Account = &Q.Account
	AccountOnline = &Q.AccountOnline
	C2CMessage = &Q.C2CMessage
	C2COfflineMessage = &Q.C2COfflineMessage
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                db,
		Account:           newAccount(db, opts...),
		AccountOnline:     newAccountOnline(db, opts...),
		C2CMessage:        newC2CMessage(db, opts...),
		C2COfflineMessage: newC2COfflineMessage(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Account           account
	AccountOnline     accountOnline
	C2CMessage        c2CMessage
	C2COfflineMessage c2COfflineMessage
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		Account:           q.Account.clone(db),
		AccountOnline:     q.AccountOnline.clone(db),
		C2CMessage:        q.C2CMessage.clone(db),
		C2COfflineMessage: q.C2COfflineMessage.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		Account:           q.Account.replaceDB(db),
		AccountOnline:     q.AccountOnline.replaceDB(db),
		C2CMessage:        q.C2CMessage.replaceDB(db),
		C2COfflineMessage: q.C2COfflineMessage.replaceDB(db),
	}
}

type queryCtx struct {
	Account           *accountDo
	AccountOnline     *accountOnlineDo
	C2CMessage        *c2CMessageDo
	C2COfflineMessage *c2COfflineMessageDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Account:           q.Account.WithContext(ctx),
		AccountOnline:     q.AccountOnline.WithContext(ctx),
		C2CMessage:        q.C2CMessage.WithContext(ctx),
		C2COfflineMessage: q.C2COfflineMessage.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
