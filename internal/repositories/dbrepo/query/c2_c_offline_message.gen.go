// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mt/internal/repositories/dbrepo/model"
)

func newC2COfflineMessage(db *gorm.DB, opts ...gen.DOOption) c2COfflineMessage {
	_c2COfflineMessage := c2COfflineMessage{}

	_c2COfflineMessage.c2COfflineMessageDo.UseDB(db, opts...)
	_c2COfflineMessage.c2COfflineMessageDo.UseModel(&model.C2COfflineMessage{})

	tableName := _c2COfflineMessage.c2COfflineMessageDo.TableName()
	_c2COfflineMessage.ALL = field.NewAsterisk(tableName)
	_c2COfflineMessage.ID = field.NewInt(tableName, "id")
	_c2COfflineMessage.CreatedAt = field.NewTime(tableName, "created_at")
	_c2COfflineMessage.UpdatedAt = field.NewTime(tableName, "updated_at")
	_c2COfflineMessage.DeletedAt = field.NewField(tableName, "deleted_at")
	_c2COfflineMessage.FromAccount = field.NewString(tableName, "from_account")
	_c2COfflineMessage.ToAccount = field.NewString(tableName, "to_account")
	_c2COfflineMessage.MessageId = field.NewInt(tableName, "message_id")
	_c2COfflineMessage.UnreadNum = field.NewInt(tableName, "unread_num")

	_c2COfflineMessage.fillFieldMap()

	return _c2COfflineMessage
}

type c2COfflineMessage struct {
	c2COfflineMessageDo c2COfflineMessageDo

	ALL         field.Asterisk
	ID          field.Int
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	FromAccount field.String
	ToAccount   field.String
	MessageId   field.Int
	UnreadNum   field.Int

	fieldMap map[string]field.Expr
}

func (c c2COfflineMessage) Table(newTableName string) *c2COfflineMessage {
	c.c2COfflineMessageDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c c2COfflineMessage) As(alias string) *c2COfflineMessage {
	c.c2COfflineMessageDo.DO = *(c.c2COfflineMessageDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *c2COfflineMessage) updateTableName(table string) *c2COfflineMessage {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.FromAccount = field.NewString(table, "from_account")
	c.ToAccount = field.NewString(table, "to_account")
	c.MessageId = field.NewInt(table, "message_id")
	c.UnreadNum = field.NewInt(table, "unread_num")

	c.fillFieldMap()

	return c
}

func (c *c2COfflineMessage) WithContext(ctx context.Context) *c2COfflineMessageDo {
	return c.c2COfflineMessageDo.WithContext(ctx)
}

func (c c2COfflineMessage) TableName() string { return c.c2COfflineMessageDo.TableName() }

func (c c2COfflineMessage) Alias() string { return c.c2COfflineMessageDo.Alias() }

func (c *c2COfflineMessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *c2COfflineMessage) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["from_account"] = c.FromAccount
	c.fieldMap["to_account"] = c.ToAccount
	c.fieldMap["message_id"] = c.MessageId
	c.fieldMap["unread_num"] = c.UnreadNum
}

func (c c2COfflineMessage) clone(db *gorm.DB) c2COfflineMessage {
	c.c2COfflineMessageDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c c2COfflineMessage) replaceDB(db *gorm.DB) c2COfflineMessage {
	c.c2COfflineMessageDo.ReplaceDB(db)
	return c
}

type c2COfflineMessageDo struct{ gen.DO }

// FirstByAccount where("`from_account`=@fromAccount and to_account`=@toAccount")
func (c c2COfflineMessageDo) FirstByAccount(fromAccount string, toAccount string) (result model.C2COfflineMessage, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, fromAccount)
	params = append(params, toAccount)
	generateSQL.WriteString("`from_account`=? and to_account`=? ")

	var executeSQL *gorm.DB

	executeSQL = c.UnderlyingDB().Where(generateSQL.String(), params...).Take(&result)
	err = executeSQL.Error
	return
}

func (c c2COfflineMessageDo) Debug() *c2COfflineMessageDo {
	return c.withDO(c.DO.Debug())
}

func (c c2COfflineMessageDo) WithContext(ctx context.Context) *c2COfflineMessageDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c c2COfflineMessageDo) ReadDB() *c2COfflineMessageDo {
	return c.Clauses(dbresolver.Read)
}

func (c c2COfflineMessageDo) WriteDB() *c2COfflineMessageDo {
	return c.Clauses(dbresolver.Write)
}

func (c c2COfflineMessageDo) Session(config *gorm.Session) *c2COfflineMessageDo {
	return c.withDO(c.DO.Session(config))
}

func (c c2COfflineMessageDo) Clauses(conds ...clause.Expression) *c2COfflineMessageDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c c2COfflineMessageDo) Returning(value interface{}, columns ...string) *c2COfflineMessageDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c c2COfflineMessageDo) Not(conds ...gen.Condition) *c2COfflineMessageDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c c2COfflineMessageDo) Or(conds ...gen.Condition) *c2COfflineMessageDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c c2COfflineMessageDo) Select(conds ...field.Expr) *c2COfflineMessageDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c c2COfflineMessageDo) Where(conds ...gen.Condition) *c2COfflineMessageDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c c2COfflineMessageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *c2COfflineMessageDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c c2COfflineMessageDo) Order(conds ...field.Expr) *c2COfflineMessageDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c c2COfflineMessageDo) Distinct(cols ...field.Expr) *c2COfflineMessageDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c c2COfflineMessageDo) Omit(cols ...field.Expr) *c2COfflineMessageDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c c2COfflineMessageDo) Join(table schema.Tabler, on ...field.Expr) *c2COfflineMessageDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c c2COfflineMessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *c2COfflineMessageDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c c2COfflineMessageDo) RightJoin(table schema.Tabler, on ...field.Expr) *c2COfflineMessageDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c c2COfflineMessageDo) Group(cols ...field.Expr) *c2COfflineMessageDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c c2COfflineMessageDo) Having(conds ...gen.Condition) *c2COfflineMessageDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c c2COfflineMessageDo) Limit(limit int) *c2COfflineMessageDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c c2COfflineMessageDo) Offset(offset int) *c2COfflineMessageDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c c2COfflineMessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *c2COfflineMessageDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c c2COfflineMessageDo) Unscoped() *c2COfflineMessageDo {
	return c.withDO(c.DO.Unscoped())
}

func (c c2COfflineMessageDo) Create(values ...*model.C2COfflineMessage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c c2COfflineMessageDo) CreateInBatches(values []*model.C2COfflineMessage, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c c2COfflineMessageDo) Save(values ...*model.C2COfflineMessage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c c2COfflineMessageDo) First() (*model.C2COfflineMessage, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.C2COfflineMessage), nil
	}
}

func (c c2COfflineMessageDo) Take() (*model.C2COfflineMessage, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.C2COfflineMessage), nil
	}
}

func (c c2COfflineMessageDo) Last() (*model.C2COfflineMessage, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.C2COfflineMessage), nil
	}
}

func (c c2COfflineMessageDo) Find() ([]*model.C2COfflineMessage, error) {
	result, err := c.DO.Find()
	return result.([]*model.C2COfflineMessage), err
}

func (c c2COfflineMessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.C2COfflineMessage, err error) {
	buf := make([]*model.C2COfflineMessage, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c c2COfflineMessageDo) FindInBatches(result *[]*model.C2COfflineMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c c2COfflineMessageDo) Attrs(attrs ...field.AssignExpr) *c2COfflineMessageDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c c2COfflineMessageDo) Assign(attrs ...field.AssignExpr) *c2COfflineMessageDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c c2COfflineMessageDo) Joins(fields ...field.RelationField) *c2COfflineMessageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c c2COfflineMessageDo) Preload(fields ...field.RelationField) *c2COfflineMessageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c c2COfflineMessageDo) FirstOrInit() (*model.C2COfflineMessage, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.C2COfflineMessage), nil
	}
}

func (c c2COfflineMessageDo) FirstOrCreate() (*model.C2COfflineMessage, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.C2COfflineMessage), nil
	}
}

func (c c2COfflineMessageDo) FindByPage(offset int, limit int) (result []*model.C2COfflineMessage, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c c2COfflineMessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c c2COfflineMessageDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c c2COfflineMessageDo) Delete(models ...*model.C2COfflineMessage) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *c2COfflineMessageDo) withDO(do gen.Dao) *c2COfflineMessageDo {
	c.DO = *do.(*gen.DO)
	return c
}
