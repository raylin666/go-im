// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mt/internal/repositories/dbrepo/model"
)

func newC2CMessage(db *gorm.DB, opts ...gen.DOOption) c2CMessage {
	_c2CMessage := c2CMessage{}

	_c2CMessage.c2CMessageDo.UseDB(db, opts...)
	_c2CMessage.c2CMessageDo.UseModel(&model.C2CMessage{})

	tableName := _c2CMessage.c2CMessageDo.TableName()
	_c2CMessage.ALL = field.NewAsterisk(tableName)
	_c2CMessage.ID = field.NewInt(tableName, "id")
	_c2CMessage.CreatedAt = field.NewTime(tableName, "created_at")
	_c2CMessage.UpdatedAt = field.NewTime(tableName, "updated_at")
	_c2CMessage.DeletedAt = field.NewField(tableName, "deleted_at")
	_c2CMessage.FromAccount = field.NewString(tableName, "from_account")
	_c2CMessage.ToAccount = field.NewString(tableName, "to_account")
	_c2CMessage.Data = field.NewString(tableName, "data")
	_c2CMessage.Status = field.NewInt8(tableName, "status")
	_c2CMessage.IsRevoke = field.NewInt8(tableName, "is_revoke")
	_c2CMessage.RevokedAt = field.NewTime(tableName, "revoked_at")
	_c2CMessage.SendAt = field.NewTime(tableName, "send_at")
	_c2CMessage.FromDeletedAt = field.NewTime(tableName, "from_deleted_at")
	_c2CMessage.ToDeletedAt = field.NewTime(tableName, "to_deleted_at")

	_c2CMessage.fillFieldMap()

	return _c2CMessage
}

type c2CMessage struct {
	c2CMessageDo c2CMessageDo

	ALL           field.Asterisk
	ID            field.Int
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	FromAccount   field.String
	ToAccount     field.String
	Data          field.String
	Status        field.Int8
	IsRevoke      field.Int8
	RevokedAt     field.Time
	SendAt        field.Time
	FromDeletedAt field.Time
	ToDeletedAt   field.Time

	fieldMap map[string]field.Expr
}

func (c c2CMessage) Table(newTableName string) *c2CMessage {
	c.c2CMessageDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c c2CMessage) As(alias string) *c2CMessage {
	c.c2CMessageDo.DO = *(c.c2CMessageDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *c2CMessage) updateTableName(table string) *c2CMessage {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.FromAccount = field.NewString(table, "from_account")
	c.ToAccount = field.NewString(table, "to_account")
	c.Data = field.NewString(table, "data")
	c.Status = field.NewInt8(table, "status")
	c.IsRevoke = field.NewInt8(table, "is_revoke")
	c.RevokedAt = field.NewTime(table, "revoked_at")
	c.SendAt = field.NewTime(table, "send_at")
	c.FromDeletedAt = field.NewTime(table, "from_deleted_at")
	c.ToDeletedAt = field.NewTime(table, "to_deleted_at")

	c.fillFieldMap()

	return c
}

func (c *c2CMessage) WithContext(ctx context.Context) *c2CMessageDo {
	return c.c2CMessageDo.WithContext(ctx)
}

func (c c2CMessage) TableName() string { return c.c2CMessageDo.TableName() }

func (c c2CMessage) Alias() string { return c.c2CMessageDo.Alias() }

func (c *c2CMessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *c2CMessage) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 13)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["from_account"] = c.FromAccount
	c.fieldMap["to_account"] = c.ToAccount
	c.fieldMap["data"] = c.Data
	c.fieldMap["status"] = c.Status
	c.fieldMap["is_revoke"] = c.IsRevoke
	c.fieldMap["revoked_at"] = c.RevokedAt
	c.fieldMap["send_at"] = c.SendAt
	c.fieldMap["from_deleted_at"] = c.FromDeletedAt
	c.fieldMap["to_deleted_at"] = c.ToDeletedAt
}

func (c c2CMessage) clone(db *gorm.DB) c2CMessage {
	c.c2CMessageDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c c2CMessage) replaceDB(db *gorm.DB) c2CMessage {
	c.c2CMessageDo.ReplaceDB(db)
	return c
}

type c2CMessageDo struct{ gen.DO }

func (c c2CMessageDo) Debug() *c2CMessageDo {
	return c.withDO(c.DO.Debug())
}

func (c c2CMessageDo) WithContext(ctx context.Context) *c2CMessageDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c c2CMessageDo) ReadDB() *c2CMessageDo {
	return c.Clauses(dbresolver.Read)
}

func (c c2CMessageDo) WriteDB() *c2CMessageDo {
	return c.Clauses(dbresolver.Write)
}

func (c c2CMessageDo) Session(config *gorm.Session) *c2CMessageDo {
	return c.withDO(c.DO.Session(config))
}

func (c c2CMessageDo) Clauses(conds ...clause.Expression) *c2CMessageDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c c2CMessageDo) Returning(value interface{}, columns ...string) *c2CMessageDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c c2CMessageDo) Not(conds ...gen.Condition) *c2CMessageDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c c2CMessageDo) Or(conds ...gen.Condition) *c2CMessageDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c c2CMessageDo) Select(conds ...field.Expr) *c2CMessageDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c c2CMessageDo) Where(conds ...gen.Condition) *c2CMessageDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c c2CMessageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *c2CMessageDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c c2CMessageDo) Order(conds ...field.Expr) *c2CMessageDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c c2CMessageDo) Distinct(cols ...field.Expr) *c2CMessageDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c c2CMessageDo) Omit(cols ...field.Expr) *c2CMessageDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c c2CMessageDo) Join(table schema.Tabler, on ...field.Expr) *c2CMessageDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c c2CMessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *c2CMessageDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c c2CMessageDo) RightJoin(table schema.Tabler, on ...field.Expr) *c2CMessageDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c c2CMessageDo) Group(cols ...field.Expr) *c2CMessageDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c c2CMessageDo) Having(conds ...gen.Condition) *c2CMessageDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c c2CMessageDo) Limit(limit int) *c2CMessageDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c c2CMessageDo) Offset(offset int) *c2CMessageDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c c2CMessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *c2CMessageDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c c2CMessageDo) Unscoped() *c2CMessageDo {
	return c.withDO(c.DO.Unscoped())
}

func (c c2CMessageDo) Create(values ...*model.C2CMessage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c c2CMessageDo) CreateInBatches(values []*model.C2CMessage, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c c2CMessageDo) Save(values ...*model.C2CMessage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c c2CMessageDo) First() (*model.C2CMessage, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.C2CMessage), nil
	}
}

func (c c2CMessageDo) Take() (*model.C2CMessage, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.C2CMessage), nil
	}
}

func (c c2CMessageDo) Last() (*model.C2CMessage, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.C2CMessage), nil
	}
}

func (c c2CMessageDo) Find() ([]*model.C2CMessage, error) {
	result, err := c.DO.Find()
	return result.([]*model.C2CMessage), err
}

func (c c2CMessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.C2CMessage, err error) {
	buf := make([]*model.C2CMessage, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c c2CMessageDo) FindInBatches(result *[]*model.C2CMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c c2CMessageDo) Attrs(attrs ...field.AssignExpr) *c2CMessageDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c c2CMessageDo) Assign(attrs ...field.AssignExpr) *c2CMessageDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c c2CMessageDo) Joins(fields ...field.RelationField) *c2CMessageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c c2CMessageDo) Preload(fields ...field.RelationField) *c2CMessageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c c2CMessageDo) FirstOrInit() (*model.C2CMessage, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.C2CMessage), nil
	}
}

func (c c2CMessageDo) FirstOrCreate() (*model.C2CMessage, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.C2CMessage), nil
	}
}

func (c c2CMessageDo) FindByPage(offset int, limit int) (result []*model.C2CMessage, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c c2CMessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c c2CMessageDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c c2CMessageDo) Delete(models ...*model.C2CMessage) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *c2CMessageDo) withDO(do gen.Dao) *c2CMessageDo {
	c.DO = *do.(*gen.DO)
	return c
}
