// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.21.12
// source: v1/message/service.proto

package message

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceSendC2CMessage = "/v1.message.Service/SendC2CMessage"

type ServiceHTTPServer interface {
	// SendC2CMessage 发送 C2C 消息
	SendC2CMessage(context.Context, *SendC2CMessageRequest) (*SendC2CMessageResponse, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/message/send_c2c_message", _Service_SendC2CMessage0_HTTP_Handler(srv))
}

func _Service_SendC2CMessage0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendC2CMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceSendC2CMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendC2CMessage(ctx, req.(*SendC2CMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendC2CMessageResponse)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	SendC2CMessage(ctx context.Context, req *SendC2CMessageRequest, opts ...http.CallOption) (rsp *SendC2CMessageResponse, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) SendC2CMessage(ctx context.Context, in *SendC2CMessageRequest, opts ...http.CallOption) (*SendC2CMessageResponse, error) {
	var out SendC2CMessageResponse
	pattern := "/api/message/send_c2c_message"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceSendC2CMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
